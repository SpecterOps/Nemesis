---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.operation.secretName }}
type: Opaque
data:
  basic-auth-user: {{ default "nemesis" .Values.operation.basicAuthUser | b64enc | quote }}

  # If the secret exists already, use that
  {{- $existingSecret := (lookup "v1" "Secret" .Release.Namespace .Values.operation.secretName) | default dict }}
  {{- $existingSecretData := (get $existingSecret "data") | default dict }}
  {{- $password := (get $existingSecretData "basic-auth-password") }}
  {{- if not $password}}
    # If the password exists in values.yaml, use that
    {{- if .Values.operation.basicAuthPassword }}
      {{- $password = .Values.operation.basicAuthPassword | b64enc }}
    {{- else }}
    # Otherwise, generate a new password
      {{- $password = randAlphaNum 32 | b64enc }}
    {{- end }}
  {{- end }}
  basic-auth-password: {{ $password | quote }}

  slack-web-hook: {{ .Values.operation.slackWebhook | b64enc | quote }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.aws.secretName }}
type: Opaque
data:
  aws-access-key-id: {{ .Values.aws.accessKeyId | b64enc }}
  aws-secret-key: {{ .Values.aws.secretKey | b64enc }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.rabbitmq.secretName }}
type: Opaque
data:
  {{- $existingSecret := (lookup "v1" "Secret" .Release.Namespace .Values.rabbitmq.secretName) | default dict }}
  {{- $existingSecretData := (get $existingSecret "data") | default dict }}
  rabbitmq-admin-user: {{ default "nemesis" .Values.rabbitmq.adminUser | b64enc }}

  {{- $adminPassword := (get $existingSecretData "rabbitmq-admin-password") }}
  {{- if not $adminPassword }}
    {{- if .Values.rabbitmq.adminPassword }}
      {{- $adminPassword = .Values.rabbitmq.adminPassword | b64enc }}
    {{- else }}
      {{- $adminPassword = randAlphaNum 32 | b64enc }}
    {{- end }}
  {{- end }}
  rabbitmq-admin-password: {{ $adminPassword | quote }}

  rabbitmq-connectionuri: {{ .Values.rabbitmq.connectionUri | b64enc }}

  {{- $erlangCookie := (get $existingSecretData "rabbitmq-erlang-cookie") | default (randAlphaNum 24 ) }}
  rabbitmq-erlang-cookie: {{ $erlangCookie | b64enc }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.minio.secretName }}
type: Opaque
data:
  root-user: {{ .Values.minio.rootUser | b64enc | quote }}

  {{- $existingSecret := (lookup "v1" "Secret" .Release.Namespace .Values.minio.secretName) | default dict }}
  {{- $existingSecretData := (get $existingSecret "data") | default dict }}
  {{- $minioRootPassword := (get $existingSecretData "root-password") }}
  {{- if not $minioRootPassword }}
    {{- if .Values.minio.rootPassword }}
      {{- $minioRootPassword = .Values.minio.rootPassword | b64enc }}
    {{- else }}
      {{- $minioRootPassword = randAlphaNum 32 | b64enc }}
    {{- end }}
  {{- end }}
  root-password: {{ $minioRootPassword | quote }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.elasticsearch.secretName }}
type: Opaque
data:
  username: {{ default "nemesis" .Values.elasticsearch.username | b64enc }}

  {{- $existingSecret := (lookup "v1" "Secret" .Release.Namespace .Values.elasticsearch.secretName) | default dict }}
  {{- $existingSecretData := (get $existingSecret "data") | default dict }}
  {{- $password := (get $existingSecretData "password") | default (randAlphaNum 24 | b64enc) }}
  password: {{ $password | quote }}

  roles: {{ "superuser" | b64enc }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.dashboard.secretName }}
type: Opaque
data:
  dashboard-user: {{ .Values.dashboard.username | b64enc | quote }}

  {{- $existingSecret := (lookup "v1" "Secret" .Release.Namespace .Values.dashboard.secretName) | default dict }}
  {{- $existingSecretData := (get $existingSecret "data") | default dict }}
  {{- $password := (get $existingSecretData "dashboard-password") }}
  {{- if not $password}}
    {{- if .Values.dashboard.password }}
      {{- $password = .Values.dashboard.password | b64enc }}
    {{- else }}
      {{- $password = randAlphaNum 32 | b64enc }}
    {{- end }}
  {{- end }}
  dashboard-password: {{ $password | quote }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.postgres.secretName }}
type: Opaque
data:
  postgres-user: {{ default "nemesis" .Values.postgres.username | b64enc }}

  {{- $existingSecret := (lookup "v1" "Secret" .Release.Namespace .Values.postgres.secretName) | default dict }}
  {{- $existingSecretData := (get $existingSecret "data") | default dict }}
  {{- $postgresPassword := (get $existingSecretData "postgres-password") | default (randAlphaNum 24 | b64enc) }}
  postgres-password: {{ $postgresPassword | quote }}

  pgadmin-email: {{ default "nemesis@nemesis.com" .Values.postgres.pgadminEmail | b64enc }}

  {{- $existingPGAdminSecret := (lookup "v1" "Secret" .Release.Namespace .Values.postgres.secretName) | default dict }}
  {{- $existingPGAdminSecretData := (get $existingPGAdminSecret "data") | default dict }}
  {{- $pgAdminPassword := (get $existingPGAdminSecretData "pgagmin-password") | default (randAlphaNum 24 | b64enc) }}
  pgadmin-password: {{ $pgAdminPassword | quote }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.jupyter.secretName }}
type: Opaque
data:
  {{- $existingSecret := (lookup "v1" "Secret" .Release.Namespace .Values.jupyter.secretName) | default dict }}
  {{- $existingSecretData := (get $existingSecret "data") | default dict }}
  {{- $jupyterToken:= (get $existingSecretData "token") }}
  {{- if not $jupyterToken }}
    {{- if .Values.jupyter.token }}
      {{- $jupyterToken = .Values.jupyter.token | b64enc }}
    {{- else }}
      {{- $jupyterToken = randAlphaNum 32 | b64enc }}
    {{- end }}
  {{- end }}
  token: {{ $jupyterToken | quote }}