apiVersion: apps/v1
kind: Deployment
metadata:
  name: passwordcracker
  labels:
    app: passwordcracker
    component: enrichment-pipeline
spec:
  replicas: 1
  selector:
    matchLabels:
      app: passwordcracker
  strategy: {}
  template:
    metadata:
      labels:
        app: passwordcracker
        component: enrichment-pipeline
    spec:
      initContainers:
        - name: init-passwordcracker-rabbitmq
          image: busybox:1.36.1
          command: ['sh', '-c', 'until wget "http://$RABBITMQ_USER:$RABBITMQ_PASSWORD@nemesis-rabbitmq-svc.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local:15672/rabbitmq/api/aliveness-test/%2F"; do echo waiting for rabbitmq; sleep 2; done;']
          env:
            - name: RABBITMQ_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.rabbitmq.existingSecret }}
                  key: rabbitmq-admin-user
            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.rabbitmq.existingSecret }}
                  key: rabbitmq-admin-password
      containers:
        - env:
            - name: ASSESSMENT_ID
              valueFrom:
                configMapKeyRef:
                  name: operation-config
                  key: assessment-id
            - name: CRACK_WORDLIST_TOP_WORDS
              value: "10000"
            - name: DATA_DOWNLOAD_DIR
              value: "/tmp"
            - name: DISABLE_ALERTING
              value: "False"
            - name: ENVIRONMENT
              valueFrom:
                configMapKeyRef:
                  name: operation-config
                  key: environment
            - name: LOG_LEVEL
              valueFrom:
                configMapKeyRef:
                  name: operation-config
                  key: log-level
            - name: NEMESIS_HTTP_SERVER
              valueFrom:
                configMapKeyRef:
                  name: operation-config
                  key: nemesis-http-server
            - name: PROMETHEUS_DISABLE_CREATED_SERIES
              value: "True"
            - name: PROMETHEUS_PORT
              value: "9090"
            - name: PUBLIC_NEMESIS_URL
              value: "$(NEMESIS_HTTP_SERVER)dashboard/"
            - name: PUBLIC_KIBANA_URL
              value: "$(NEMESIS_HTTP_SERVER)kibana/"
            - name: RABBITMQ_CONNECTION_URI
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.rabbitmq.existingSecret }}
                  key: rabbitmq-connectionuri

            - name: POSTGRES_SERVER
              value: postgres
            - name: POSTGRES_PORT
              value: "5432"
            - name: POSTGRES_DATABASE
              value: nemesis
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgres.existingSecret }}
                  key: postgres-user
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgres.existingSecret }}
                  key: postgres-password
            - name: POSTGRES_CONNECTION_URI
              value: "postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@$(POSTGRES_SERVER):$(POSTGRES_PORT)/$(POSTGRES_DATABASE)"

            - name: SLACK_CHANNEL
              valueFrom:
                configMapKeyRef:
                  name: operation-config
                  key: slack-alert-channel
            - name: SLACK_WEBHOOK_URL
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.operation.existingSecret }}
                  key: slack-web-hook
            - name: SLACK_USERNAME
              value: Nemesis
            - name: SLACK_EMOJI
              value: ":smiling_imp:"
          image: "{{ .Values.passwordcracker.image.repository }}:{{ .Values.passwordcracker.image.tag }}"
          imagePullPolicy: {{ .Values.passwordcracker.image.pullPolicy }}
          name: nemesis-passwordcracker
          ports:
            - containerPort: 9090
              name: prometheus
          resources: {{ toYaml .Values.passwordcracker.resources | nindent 12 }}
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: passwordcracker
  labels:
    app: passwordcracker
    component: enrichment-pipeline
spec:
  type: NodePort
  ports:
    - name: "9090"
      port: 9090
      targetPort: 9090
      nodePort: {{ .Values.passwordcracker.nodePort }}
  selector:
    app: passwordcracker
