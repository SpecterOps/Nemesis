{{ if eq .Values.operation.environment "production" }}
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: elasticsearch-data-pv
  labels:
    type: local
    app: elasticsearch
spec:
  storageClassName: manual
  capacity:
    storage: {{ .Values.elasticsearch.storage }}
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: "/mnt/data/elastic2/"

---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: elasticsearch-data-pvc
  labels:
    app: elasticsearch
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.elasticsearch.storage }}
  volumeName: elasticsearch-data-pv # the volume we want this claim to bind to
{{ end }}

---
apiVersion: elasticsearch.k8s.elastic.co/v1
kind: Elasticsearch
metadata:
  name: nemesis
spec:
  version: 8.11.0
  auth:
    fileRealm:
      - secretName: {{ .Values.elasticsearch.existingSecret }}
  http:
    tls:
      selfSignedCertificate:
        disabled: true
  nodeSets:
    - name: default
      count: 1
      config:
        xpack.security.authc:
          anonymous:
            username: anonymous
            roles: superuser
            authz_exception: false
      podTemplate:
        spec:
          initContainers: # see https://www.elastic.co/guide/en/cloud-on-k8s/current/k8s-virtual-memory.html#k8s-virtual-memory
            - name: sysctl
              securityContext:
                privileged: true
                runAsUser: 0
              command: ["sh", "-c", "sysctl -w vm.max_map_count=262144"]
            {{- if eq .Values.operation.environment "production" }}
            - name: volume-mount-hack
              image: busybox
              imagePullPolicy: IfNotPresent
              securityContext:
                privileged: true
                runAsUser: 0
              command: ["sh", "-c", "chown -R 1000:1000 /usr/share/elasticsearch/data"]
              volumeMounts:
                - name: elasticsearch-data-volume
                  mountPath: /usr/share/elasticsearch/data
            {{- end }}
          containers:
            - name: elasticsearch
              resources: {{ toYaml .Values.elasticsearch.resources | nindent 14 }}
              env:
                - name: ES_JAVA_OPTS
                  value: "-Xmx1024m -Xms1024m"
              {{- if eq .Values.operation.environment "production" }}
              volumeMounts:
                - mountPath: /usr/share/elasticsearch/data
                  name: elasticsearch-data-volume
              {{- end }}
          {{- if eq .Values.operation.environment "production" }}
          restartPolicy: Always
          volumes:
            - name: elasticsearch-data-volume
              persistentVolumeClaim:
                claimName: elasticsearch-data-pvc
          {{- end }}
---
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: elastic-stripprefix
spec:
  stripPrefix:
    prefixes:
      - /elastic
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: elastic-ingress
  annotations:
    {{- if .Values.elasticsearch.auth.basicAuth }}
    traefik.ingress.kubernetes.io/router.middlewares: "{{ .Release.Namespace }}-elastic-stripprefix@kubernetescrd, {{ .Release.Namespace }}-{{ .Values.basicAuth.middlewareName }}@kubernetescrd"
    {{- else  }}
    traefik.ingress.kubernetes.io/router.middlewares: "{{ .Release.Namespace }}-elastic-stripprefix@kubernetescrd"
    {{- end }}

    {{- if .Values.elasticsearch.ingress.annotations }}
    {{- .Values.elasticsearch.ingress.annotations | toYaml | nindent 4 }}
    {{- end }}
spec:
  ingressClassName: traefik
  rules:
    - http:
        paths:
          - path: /elastic
            pathType: Prefix
            backend:
              service:
                name: nemesis-es-http
                port:
                  number: 9200