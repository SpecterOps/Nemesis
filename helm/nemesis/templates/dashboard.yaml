---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dashboard
  labels:
    app: dashboard
spec:
  replicas: 1
  selector:
    matchLabels:
      app: dashboard
  strategy: {}
  template:
    metadata:
      labels:
        app: dashboard
    spec:
      containers:
        - env:
            - name: STREAMLIT_BROWSER_GATHER_USAGE_STATS
              value: "False"

            {{- range .Values.dashboard.extraEnvVars }}
            - name: {{ .name }}
              value: "{{ .value }}"
            {{- end }}

            - name: PAGE_SIZE
              value: "30"
            - name: LOG_LEVEL
              valueFrom:
                configMapKeyRef:
                  name: operation-config
                  key: log-level
            - name: ENVIRONMENT
              valueFrom:
                configMapKeyRef:
                  name: operation-config
                  key: environment
            - name: DASHBOARD_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.dashboard.existingSecret }}
                  key: dashboard-user
            - name: DASHBOARD_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.dashboard.existingSecret }}
                  key: dashboard-password
            - name: STREAMLIT_SERVER_PORT
              value: "8601"
            - name: NEMESIS_HTTP_SERVER
              valueFrom:
                configMapKeyRef:
                  name: operation-config
                  key: nemesis-http-server
            - name: PUBLIC_KIBANA_URL
              value: "$(NEMESIS_HTTP_SERVER)kibana/"
            - name: WEB_API_URL
              value: "$(NEMESIS_HTTP_SERVER)api/"
            - name: NLP_URL
              value: "http://nlp:9803/"
            - name: POSTGRES_SERVER
              value: postgres
            - name: POSTGRES_PORT
              value: "5432"
            - name: POSTGRES_DATABASE
              value: nemesis
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgres.existingSecret }}
                  key: postgres-user
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgres.existingSecret }}
                  key: postgres-password
            - name: POSTGRES_CONNECTION_URI
              value: "postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@$(POSTGRES_SERVER):$(POSTGRES_PORT)/$(POSTGRES_DATABASE)"
            - name: DB_ITERATION_SIZE
              value: "1000"

            - name: ELASTICSEARCH_URL
              value: http://nemesis-es-internal-http:9200/
            - name: KIBANA_URL
              value: http://nemesis-kb-http:5601/
            - name: ELASTICSEARCH_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.elasticsearch.existingSecret }}
                  key: username
            - name: ELASTICSEARCH_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.elasticsearch.existingSecret }}
                  key: password

          image: "{{ .Values.dashboard.image.repository }}:{{ .Values.dashboard.image.tag }}"
          imagePullPolicy: {{ .Values.dashboard.image.pullPolicy }}
          name: dashboard
          ports:
            - containerPort: 8601
              name: dashboard-http
          resources: {{ toYaml .Values.dashboard.resources | nindent 12 }}

          readinessProbe:
            httpGet:
              path: /
              port: dashboard-http
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 5
            failureThreshold: 10
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: dashboard
    component: dashboard
  name: dashboard
spec:
  type: NodePort
  ports:
    - name: "8601"
      port: 8601
      targetPort: 8601
      nodePort: {{ .Values.dashboard.nodePort }}
  selector:
    app: dashboard

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: dashboard-ingress
  annotations:
    # nginx.ingress.kubernetes.io/proxy-body-size: "1000m"
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: {{ .Values.operation.basicAuthExistingSecret }}
    nginx.ingress.kubernetes.io/auth-realm: 'Authentication Required'
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/rewrite-target: /$2
spec:
  ingressClassName: nginx
  rules:
    - http:
        paths:
          - path: /dashboard(/|$)(.*)
            pathType: ImplementationSpecific
            backend:
              service:
                name: dashboard
                port:
                  number: 8601