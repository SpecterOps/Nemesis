---
apiVersion: v1
kind: ConfigMap
metadata:
  name: pgadmin-config
data:
  config_local.py: |
    # Allow email addresses that end with .local
    import email_validator
    email_validator.SPECIAL_USE_DOMAIN_NAMES.remove("local")

  # pgpass: |
  #   postgres:5432:postgres:postgres:nemesis
  servers.json: |
    {
        "Servers": {
          "1": {
            "Name": "Nemesis",
            "Group": "Servers",
            "Port": 5432,
            "Username": "nemesis",
            "Host": "postgres",
            "SSLMode": "prefer",
            "MaintenanceDB": "postgres"
          }
        }
    }

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: pgadmin
  labels:
    app: pgadmin
spec:
  serviceName: pgadmin-service
  podManagementPolicy: Parallel
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: pgadmin
  template:
    metadata:
      labels:
        app: pgadmin
    spec:
      terminationGracePeriodSeconds: 10
      containers:
        - name: pgadmin
          image: dpage/pgadmin4:7.7
          imagePullPolicy: IfNotPresent
          env:
            - name: PGADMIN_DEFAULT_EMAIL
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgres.existingSecret }}
                  key: pgadmin-email
            - name: PGADMIN_DEFAULT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgres.existingSecret }}
                  key: pgadmin-password
            - name: SCRIPT_NAME
              value: /pgadmin/
            - name: MAX_LOGIN_ATTEMPTS
              value: "15"
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          volumeMounts:
            - name: pgadmin-config
              mountPath: /pgadmin4/servers.json
              subPath: servers.json
              readOnly: true
            - name: pgadmin-config
              mountPath: /pgadmin4/config_local.py
              subPath: config_local.py
              readOnly: true
            - name: pgadmin-data
              mountPath: /var/lib/pgadmin
      volumes:
        - name: pgadmin-config
          configMap:
            name: pgadmin-config
  volumeClaimTemplates:
    - metadata:
        name: pgadmin-data
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 3Gi
---
apiVersion: v1
kind: Service
metadata:
  name: pgadmin
  labels:
    app: pgadmin
spec:
  ports:
    - name: "80"
      port: 80
      targetPort: 80
      nodePort: {{ .Values.pgAdmin.nodePort }}
  selector:
    app: pgadmin
  type: NodePort

---
# working for /pgadmin https://stackoverflow.com/a/72586264
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: pgadmin-ingress
  annotations:
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: {{ .Values.operation.basicAuthExistingSecret }}
    nginx.ingress.kubernetes.io/auth-realm: 'Authentication Required'
    ingress.kubernetes.io/ssl-redirect: "false"
spec:
  ingressClassName: nginx
  rules:
    - http:
        paths:
          - path: /pgadmin
            pathType: ImplementationSpecific
            backend:
              service:
                name: pgadmin
                port:
                  number: 80