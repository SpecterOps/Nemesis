---
apiVersion: v1
kind: ConfigMap
metadata:
  name: hasura-metadata
data:
  # to export: curl -d '{"type": "export_metadata", "args": {}}' http://localhost:8080/v1/metadata -o hasura_metadata.json
  hasura_metadata.json: |-
    {{- .Files.Get "files/hasura/hasura_metadata.json" | nindent 4 }}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: hasura
  name: hasura
spec:
  type: NodePort
  ports:
    - name: "8080"
      port: 8080
      targetPort: 8080
      nodePort: {{ .Values.hasura.nodePort }}
  selector:
    app: hasura
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: hasura-ingress
  annotations:
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: {{ .Values.operation.basicAuthExistingSecret }}
    nginx.ingress.kubernetes.io/auth-realm: 'Authentication Required'
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/rewrite-target: /$2

spec:
  ingressClassName: nginx
  rules:
    - http:
        paths:
          - path: /hasura(/|$)(.*)
            pathType: ImplementationSpecific
            backend:
              service:
                name: hasura
                port:
                  number: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hasura
  labels:
    app: hasura
spec:
  replicas: 1
  selector:
    matchLabels:
      app: hasura
  strategy: {}
  template:
    metadata:
      labels:
        app: hasura
    spec:
      initContainers:
        - name: init-hasura-postgres
          image: "{{ .Values.nemesisWaiter.image.repository }}:{{ .Values.nemesisWaiter.image.tag }}"
          imagePullPolicy: {{ .Values.nemesisWaiter.image.pullPolicy }}
          env:
            - name: POSTGRES_SERVER
              value: postgres
            - name: POSTGRES_PORT
              value: "5432"
            - name: POSTGRES_DATABASE
              value: nemesis
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgres.existingSecret }}
                  key: postgres-user
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgres.existingSecret }}
                  key: postgres-password
            - name: PG_DATABASE_URL
              value: "postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@$(POSTGRES_SERVER):$(POSTGRES_PORT)/$(POSTGRES_DATABASE)"
          command: ["/bin/sh", "-c"]
          args:
            - |
              until pg_isready -h ${POSTGRES_SERVER} -p ${POSTGRES_PORT} -d ${POSTGRES_DATABASE} -U ${POSTGRES_USER}
              do
                echo "Waiting for postgres to be ready at ${PG_DATABASE_URL}..."
                sleep 2
              done

              echo "postgres is available."
      containers:
        - env:
            - name: POSTGRES_SERVER
              value: postgres
            - name: POSTGRES_PORT
              value: "5432"
            - name: POSTGRES_DATABASE
              value: nemesis
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgres.existingSecret }}
                  key: postgres-user
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgres.existingSecret }}
                  key: postgres-password
            - name: PG_DATABASE_URL
              value: "postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@$(POSTGRES_SERVER):$(POSTGRES_PORT)/$(POSTGRES_DATABASE)"
            - name: HASURA_GRAPHQL_DATABASE_URL
              value: "postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@$(POSTGRES_SERVER):$(POSTGRES_PORT)/$(POSTGRES_DATABASE)"
            - name: HASURA_GRAPHQL_METADATA_DATABASE_URL
              value: "postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@$(POSTGRES_SERVER):$(POSTGRES_PORT)/$(POSTGRES_DATABASE)"
            - name: HASURA_GRAPHQL_ENABLE_CONSOLE
              value: "true"
            - name: HASURA_GRAPHQL_DEV_MODE
              value: "true"
            - name: HASURA_GRAPHQL_ENABLED_LOG_TYPES
              value: startup
          image: "{{ .Values.hasura.image.repository }}:{{ .Values.hasura.image.tag }}"
          imagePullPolicy: {{ .Values.hasura.image.pullPolicy }}
          name: hasura
          ports:
            - containerPort: 8080
              name: http
          resources: {{ toYaml .Values.dotnet.resources | nindent 12 }}
          livenessProbe:
            httpGet:
              path: /healthz
              port: http
            initialDelaySeconds: 5
            timeoutSeconds: 5
            periodSeconds: 5
          readinessProbe:
            httpGet:
              path: /healthz
              port: http
            initialDelaySeconds: 5
            timeoutSeconds: 5
            periodSeconds: 5
          volumeMounts:
            - name: hasura-metadata
              mountPath: /opt/hasura/hasura_metadata.json
              subPath: hasura_metadata.json
              readOnly: false
          lifecycle:
            postStart:
              exec:
                command: ["/bin/sh", "-c", "sleep 10 && curl -d '{\"type\":\"replace_metadata\", \"args\":'$(cat /opt/hasura/hasura_metadata.json)'}' http://localhost:8080/v1/metadata"]
      volumes:
        - name: hasura-metadata
          configMap:
            name: hasura-metadata
      restartPolicy: Always