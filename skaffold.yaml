apiVersion: skaffold/v4beta6
kind: Config
metadata:
  name: nemesis
build:
  tagPolicy:
    sha256: {}
  local:
    push: false
    tryImportMissing: false
    useBuildkit: true
    concurrency: 0
  artifacts:
    - image: nemesis-waiter
      docker:
        dockerfile: dockerfiles/waiter.Dockerfile
    - image: nemesis-jupyter
      docker:
        dockerfile: dockerfiles/jupyter.Dockerfile
    - image: nemesis-dotnet
      docker:
        dockerfile: dockerfiles/dotnet.Dockerfile
    - image: nemesis-nlp
      docker:
        dockerfile: dockerfiles/nlp.Dockerfile
    - image: nemesis-passwordcracker
      docker:
        dockerfile: dockerfiles/passwordcracker.Dockerfile
    - image: nemesis-enrichment
      docker:
        dockerfile: dockerfiles/enrichment.Dockerfile
      sync:
        manual:
          - src: 'cmd/enrichment/**/*.py'
            dest: '/app/cmd/enrichment'
            strip: 'cmd/enrichment'
    - image: nemesis-dashboard
      docker:
        dockerfile: dockerfiles/dashboard.Dockerfile
      sync:
        infer:
          - "**/*"
deploy:
  helm:
    releases:
    - name: nemesis
      chartPath: helm/nemesis
      setValueTemplates:
        dashboard.image.repository: "{{.IMAGE_REPO_nemesis_dashboard}}"
        dashboard.image.tag: "{{.IMAGE_TAG_nemesis_dashboard}}@{{.IMAGE_DIGEST_nemesis_dashboard}}"
        nemesisWaiter.image.repository: "{{.IMAGE_REPO_nemesis_waiter}}"
        nemesisWaiter.image.tag: "{{.IMAGE_TAG_nemesis_waiter}}@{{.IMAGE_DIGEST_nemesis_waiter}}"
        dotnet.image.repository: "{{.IMAGE_REPO_nemesis_dotnet}}"
        dotnet.image.tag: "{{.IMAGE_TAG_nemesis_dotnet}}@{{.IMAGE_DIGEST_nemesis_dotnet}}"
        enrichment.image.repository: "{{.IMAGE_REPO_nemesis_enrichment}}"
        enrichment.image.tag: "{{.IMAGE_TAG_nemesis_enrichment}}@{{.IMAGE_DIGEST_nemesis_enrichment}}"
        jupyter.image.repository: "{{.IMAGE_REPO_nemesis_jupyter}}"
        jupyter.image.tag: "{{.IMAGE_TAG_nemesis_jupyter}}@{{.IMAGE_DIGEST_nemesis_jupyter}}"
        nlp.image.repository: "{{.IMAGE_REPO_nemesis_nlp}}"
        nlp.image.tag: "{{.IMAGE_TAG_nemesis_nlp}}@{{.IMAGE_DIGEST_nemesis_nlp}}"
        passwordcracker.image.repository: "{{.IMAGE_REPO_nemesis_passwordcracker}}"
        passwordcracker.image.tag: "{{.IMAGE_TAG_nemesis_passwordcracker}}@{{.IMAGE_DIGEST_nemesis_passwordcracker}}"
      setValues:
        dashboard.image.pullPolicy: IfNotPresent
        nemesisWaiter.image.pullPolicy: IfNotPresent
        dotnet.image.pullPolicy: IfNotPresent
        enrichment.image.pullPolicy: IfNotPresent
        jupyter.image.pullPolicy: IfNotPresent
        nlp.image.pullPolicy: IfNotPresent
        passwordcracker.image.pullPolicy: IfNotPresent
    - name: nemesis-monitoring
      chartPath: helm/monitoring
      setValueTemplates:
        nemesisWaiter.image.repository: "{{.IMAGE_REPO_nemesis_waiter}}"
        nemesisWaiter.image.tag: "{{.IMAGE_TAG_nemesis_waiter}}@{{.IMAGE_DIGEST_nemesis_waiter}}"
      setValues:
        nemesisWaiter.image.pullPolicy: IfNotPresent
    flags:
      upgrade:
        ["--timeout=30m"]
      install:
        ["--timeout=45m"]
portForward:
  - resourceType: service
    resourceName: ingress-nginx-controller
    namespace: ingress-nginx
    port: 80
    localPort: 8080
    address: 0.0.0.0
  - resourceType: service
    resourceName: jupyter
    namespace: default
    port: 8888
    address: 0.0.0.0
---
apiVersion: skaffold/v4beta6
kind: Config
metadata:
  name: enrichment
build:
  tagPolicy:
    sha256: {}
  local:
    push: false
    tryImportMissing: false
    useBuildkit: true
    concurrency: 0
  artifacts:
    - image: enrichment-dev
      docker:
        dockerfile: dockerfiles/enrichment.Dockerfile
      sync:
        manual:
          - src: 'cmd/enrichment/**/*.py'
            dest: '/app/cmd/enrichment'
            strip: 'cmd/enrichment'
deploy:
  helm:
    releases:
    - name: enrichment
      chartPath: helm/enrichment
      setValueTemplates:
        operation.environment: test # force no storage
        enrichment.image.repository: "{{.IMAGE_REPO_enrichment_dev}}"
        enrichment.image.tag: "{{.IMAGE_REPO_enrichment_dev}}@{{.IMAGE_DIGEST_enrichment_dev}}"
      setValues:
        enrichment.image.pullPolicy: IfNotPresent