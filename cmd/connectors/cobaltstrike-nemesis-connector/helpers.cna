# Always keep 4 and 34 enabled - they'll help catch common developer mistakes
debug(debug() | 4);     # 4  =	display a runtime warning for the first time use of non-declared variables.
#debug(debug() | 8);    # 8  =  DEBUGGING: trace all function calls
debug(debug() | 34);    # 34 = "throw" all errors flagged for use with &checkError
#debug(debug() | 64);   # 64 =	DEBUGGING: trace all predicate decisions (follow program logic)

global('%nemesis::Settings');

import java.util.Calendar;

sub helpers::IsHeadlessClient {
    # returns true if the client is headless (i.e., agscript)
    import aggressor.*;

    if([aggressor.Aggressor getFrame] is $null) {
        return true;
    } else {
        return false;
    }
}

sub helpers::FormatDateIso8601 {
    # Returns the date (optionally supplied) as an ISO 8601 formatted time
    #   From https://www.quora.com/How-do-I-get-the-current-UTC-date-using-Java
    local('$1 $date $dateFormat $UtcTimezone $dateStr');

    if($1) {
        $date = [new java.util.Date: $1];
    } else {
        $date = [new java.util.Date];
    }

    $dateFormat = [new java.text.SimpleDateFormat: "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"];
    $UtcTimezone = [java.util.TimeZone getTimeZone: "UTC"];
    [$dateFormat setTimeZone: $UtcTimezone];
    $dateStr = [$dateFormat format: $date];

    return $dateStr;
}

sub helpers::BuildJson {
    # Takes a BeaconID/datatype/data and builds a proper JSON string
    local('$1 $2 $3 $4 $5 $BID $Datatype $TimeStamp $Data %JsonData $IndentSpaces $JsonString');

    $BID = $1;
    $Datatype = $2;
    $Data = $3;
    $TimeStamp = $4;
    $IndentSpaces = $5;

    %JsonData = %(
        metadata => helpers::GetMetadata($BID, $Datatype, $TimeStamp),
        data => $Data
    );

    $JsonString = json_dumps(%JsonData, $IndentSpaces);

    # Yes, the following is a hack because Aggressor bools are not properly jsonified into true/false for the protobufs >_<
    $JsonString = replace($JsonString, "\"true\"", "true");
    $JsonString = replace($JsonString, "\"false\"", "false");

    return $JsonString;
}


sub helpers::GetMetadata {
    # Gets a metadata hashtable for the current beacon ID
    local('$1 $2 $3 $BID $Expiration $Datatype $TimeStamp');

    $BID = $1;
    $Datatype = $2;

    if(!$3) {
        # if a timestamp isn't passed, use the current time
        $TimeStamp = [new java.util.Date];
    }
    else {
        $TimeStamp = long($3);
    }

    $Expiration = helpers::GetExpirationTime($TimeStamp);

    return %(
        agent_id => $BID,
        agent_type => "beacon",
        automated => "true",
        data_type => $Datatype,
        expiration => helpers::FormatDateIso8601($Expiration),
        # source => beacon_info($BID, "computer"), # only have the netbios name here unfortunately
        project => %nemesis::Settings['NemesisProject'],
        timestamp => helpers::FormatDateIso8601($TimeStamp)
    );
}

sub helpers::GetExpirationTime {
    # Gets the current time and adds the specified number ('DataExpirationDays')
    #    of days to create the expiration date for the data entry
    local('$1 $Date $Calendar $Days $ExpirationHours');

    $Date = [new java.util.Date: $1];

    $Days = %nemesis::Settings['DataExpirationDays'];
    $ExpirationHours = $Days * 24;

    $Calendar = [java.util.Calendar getInstance];
    [$Calendar setTime: $Date];
    [$Calendar add: [java.util.Calendar HOUR], $ExpirationHours];

    return [$Calendar getTime];
}

sub helpers::GetRandomFileName {
    local('$random');

    $random = [java.util.UUID randomUUID];

    return [$random toString];
}