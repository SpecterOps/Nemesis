# Always keep 4 and 34 enabled - they'll help catch common developer mistakes
debug(debug() | 4);     # 4  =  display a runtime warning for the first time use of non-declared variables.
#debug(debug() | 8);    # 8  =  DEBUGGING: trace all function calls
debug(debug() | 34);    # 34 =  "throw" all errors flagged for use with &checkError
#debug(debug() | 64);   # 64 =  DEBUGGING: trace all predicate decisions (follow program logic)

include(script_resource("logger.cna"));
include(script_resource("file.cna"));
include(script_resource("helpers.cna"));
include(script_resource("http.cna"));
include(script_resource("json.cna"));
include(script_resource("ps.cna"));

global('%nemesis::Settings %EventHandlerMap');


#####################################################################
#                                                                   #
#          SETTINGS TO CHANGE PER ENGAGEMENT                        #
#                                                                   #
#####################################################################


# The name/ID for the project/engagement
#   overwritten by the NEMESIS_PROJECT environment variable if present
%nemesis::Settings['NemesisProject'] = "PROJECT-X";


#####################################################################
#                                                                   #
#          GLOBAL SETTINGS ACROSS ENGAGEMENTS                       #
#                                                                   #
#####################################################################

# How many days after download the data should be marked for expiration
#   overwritten by the NEMESIS_DATA_EXPIRATION_DAYS environment variable if present
%nemesis::Settings['DataExpirationDays'] = 100;

# The directory where teamserver synced files are written to on this host
#   overwritten by the NEMESIS_COBALTSTRIKE_DOWNLOADS_DIR environment variable if present
%nemesis::Settings['DownloadsDir'] = [System getProperty: "java.io.tmpdir"] . [System getProperty: "file.separator"];

# The Nemesis server URL, http://<host>:<PORT>/ format
# Used when constructing the URL to web api, elastic, kibana, etc (e.g., NEMESIS_BASE_URL + "/kibana")
#   overwritten by the NEMESIS_BASE_URL environment variable if present
%nemesis::Settings['NemesisBaseUrl'] = $null;

# The Nemesis web-api HTTP basic auth credentials in the form <user>:<pass>
#   overwritten by the NEMESIS_CREDS environment variable if present
%nemesis::Settings['NemesisCreds'] = $null;

# 1/0, defines debug JSON output
#   overwritten by the NEMESIS_DEBUG_JSON environment variable if present
%nemesis::Settings['DebugJson'] = 0;

# Underline minute threshold for beacon process listings
%nemesis::Settings['BeaconUnderlineThreshold'] = 120;


#################################################################
#
#   Registered Commands, Aliases, and Menus
#
#################################################################

beacon_command_register(
    "nemesis_file_analysis",
    "Display Nemesis file analysis for a particular submission ID",
    "Use: nemesis_file_analysis <submission ID>"
)

beacon_command_register(
    "bof_reg_collect",
    "Recursively collect keys from a registry path in a serialized form that Nemesis can ingest.",
    "Usage: bof_reg_collect <HKCR|HKCU|HKLM|HKU|HKCC> <path>"
)


alias bof_reg_collect {
    local('$params $args $text $hive $path');

    if(size(@_) < 2)
    {
        berror($1, beacon_command_detail("bof_reg_collect"));
        return;
    }

    $hive = $2;
    $path = $3;

    $args = bof_pack($1, "zzz", "bof_reg_collect.nemesis", $hive, $path);
    beacon_inline_execute($1, file::ReadBOF($1, "reg_collect"), "go", $args);
}


alias upload {
    local('$1 $2 $3 $BID $FilePath $Force $YaraResultsRaw %YaraResultsDict $YaraMatches $YaraMatchesString $FileID');

    $BID = $1;
    $FilePath = $2;
    $Force = false;

    if($FilePath eq "-f") {
        $Force = true;
        $FilePath = $3;
    }

    if(!-exists $FilePath) {
        berror($1, "File path '" . $FilePath . "' doesn't exist!");
        return;
    }

    $YaraResultsRaw = http::YaraFile($FilePath);
    %YaraResultsDict = json_loads($YaraResultsRaw);
    $YaraMatches = %YaraResultsDict["yara_matches"];

    if(size($YaraMatches) > 0) {
        $YaraMatchesString = join(", ", $YaraMatches);
        if($Force) {
            blog2($BID, "WARNING: forcing an upload despite yara rule matches: " . $YaraMatchesString)
            bupload($BID, $FilePath);
        }
        else {
            berror($BID, "Upload blocked because of yara rule matches (use `upload -f <FILE>` to force): " . $YaraMatchesString)
        }
    }
    else {
        bupload($BID, $FilePath);
    }
}


alias execute-assembly {
    local('$1 $2 $3 $BID $Force $Args $AssemblyPath $YaraResultsRaw %YaraResultsDict $YaraMatches $YaraMatchesString')

    $BID = $1;
    $Force = false;

    $Args = replace($0, "execute-assembly ", "");

    if ($2 eq "-f") {
        if ($3 eq "") {
            berror($1, "No assembly path passed!");
            return;
        }
        else {
            $AssemblyPath = $3;
            $Args = replace($Args, "$3", "");
            $Force = true;
        }
    }
    else {
        $AssemblyPath = $2;
        $Args = replace($Args, "$2", "");
    }

    $Args = matches($Args, '\s*(.*)\s*')[0]; # Trim whitespaces

    if(!-exists $AssemblyPath) {
        berror($1, "Assembly '" . $AssemblyPath . "' doesn't exist!");
        return;
    }

    $YaraResultsRaw = http::YaraFile($AssemblyPath);
    %YaraResultsDict = json_loads($YaraResultsRaw);
    $YaraMatches = %YaraResultsDict["yara_matches"];

    if(size($YaraMatches) > 0) {
        $YaraMatchesString = join(", ", $YaraMatches);
        if($Force) {
            blog2($BID, "WARNING: forcing execution of an assembly despite yara rule matches: " . $YaraMatchesString)
            bexecute_assembly($BID, $AssemblyPath, $Args);
        }
        else {
            berror($BID, "Execution blocked because of yara rule matches (use `execute-assembly -f <ASSEMBLY>` to force): " . $YaraMatchesString)
        }
    }
    else {
        bexecute_assembly($BID, $AssemblyPath, $Args);
    }
}


popup nemesis {
    item "Reprocess Nemesis Downloads" {
        prompt_confirm("Are you sure you want Nemesis to reprocess ALL existing downloads?", {
            privmsg("nemesis-bot", "ReprocessDownloads");
        });
    }
}

menubar("Nemesis", "nemesis");



#################################################################
#
#   Local Processing Functions
#
#################################################################

sub nemesis::ProcessFile {
    # Submits a file to Nemesis for processing and queries elastic for any data about the file
    local('$1 $2 $3 $4 $5 $6 $7 $BID $TargetFileFolder $TargetFilePath $TargetFileName $TargetFileSize $HideResults $TimeStamp $FilePath $BID $FileID $MessageID %Output $Results');

    # $BID, $LocalFilePath, $TargetFileFolder, $TargetFileName, $TimeStamp

    $BID = $1;
    $FilePath = $2;         # Path to the file on the current machine
    $TargetFileFolder = $3; # Folder for the file on target
    $TargetFileName = $4;   # Name of the file on target
    $TargetFileSize = $5;   # Size of the file on target
    $TimeStamp = $6;        # The timestamp passed from the beacon metadata
    $HideResults = $7;      # whether to hide results or display them to a beacon

    $TargetFilePath = replace($TargetFileFolder, "\\\\", "/") . $TargetFileName;

    # Post the file itself to the API, get the UUID back
    $FileID = http::UploadFile($FilePath);

    if($FileID) {
        logger::WriteVerbose("$TargetFilePath uploaded, UUID: $FileID");

        if ($TargetFileName hasmatch "bof_reg_collect.nemesis") {
            %Output = %(
                data => $FileID,
                is_file => "true",
                tags => @("bof_reg_collect")
            );

            # post the metadata to the correct API endpoint
            $MessageID = http::PostData($BID, "raw_data", @(%Output), $TimeStamp);
        } else {
            %Output = %(
                object_id => $FileID,
                path => $TargetFilePath,
                size => $TargetFileSize
            );

            # post the metadata to the correct API endpoint
            $MessageID = http::PostData($BID, "file_data", @(%Output), $TimeStamp);
        }

        if(!$HideResults) {
            blog($BID, "Nemesis: uploaded $TargetFileName for analysis\ (object_id: " . $FileID . " , submission_id: " . $MessageID . ")");
        }
        logger::WriteVerbose("MessageID: ". $MessageID);

        # 30 retries, 3 second sleep between each
        $Results = http::GetFileResults($MessageID, 30, 3);
        if(%nemesis::Settings['DebugJson']) {
            logger::WriteVerbose("Elastic file results: " . $Results);
        }

        if($Results) {
            if(!$HideResults) {
                nemesis::DisplayFileResults($BID, $Results);
            }
        }
        else {
            berror($BID, "Timeout in retrieving Nemesis analysis.\nTry shortly with `nemesis_file_analysis " . $MessageID . "`");
            return $null;
        }
    }
    else {
        logger::WriteError("Error in uploading file to Nemesis: no file UUID returned");
        berror($BID, "Error in uploading file to Nemesis: no file UUID returned");
    }

    if(-exists $FilePath) {
        deleteFile($FilePath);
    }
}

sub nemesis::DisplayFileResults {
    local('$1 $2 $BID $results $path $size $sha1 $magicType $objectId $messageId $contains_dpapi $has_parsed_credentials')
    local('$has_deserialization $encrypted $message $kibana_link $file_message $has_noseyparker_results $dashboard_link')

    $BID = $1;
    $results = $2;

    $path = $results["hits"]["hits"][0]["_source"]["path"];
    $size = $results["hits"]["hits"][0]["_source"]["size"];
    $sha1 = $results["hits"]["hits"][0]["_source"]["hashes"]["sha1"];
    $magicType = $results["hits"]["hits"][0]["_source"]["magicType"];
    $objectId = $results["hits"]["hits"][0]["_source"]["objectId"];
    $messageId = $results["hits"]["hits"][0]["_source"]["metadata"]["messageId"];

    $contains_dpapi = false;
    $has_parsed_credentials = false;
    $has_deserialization = false;
    $encrypted = false;
    $has_noseyparker_results = false;

    if("containsDpapi" in $results["hits"]["hits"][0]["_source"]) {
        $contains_dpapi = $results["hits"]["hits"][0]["_source"]["containsDpapi"];
    }

    if("noseyparker" in $results["hits"]["hits"][0]["_source"]) {
        $has_noseyparker_results = true;
    }

    if("parsedData" in $results["hits"]["hits"][0]["_source"]) {
        if("hasParsedCredentials" in $results["hits"]["hits"][0]["_source"]["parsedData"]) {
            $has_parsed_credentials = $results["hits"]["hits"][0]["_source"]["parsedData"]["hasParsedCredentials"];
        }
    }

    try {
        if("analysis" in $results["hits"]["hits"][0]["_source"]) {
            if("dotnetAnalysis" in $results["hits"]["hits"][0]["_source"]["analysis"]) {
                if("hasDeserialization" in $results["hits"]["hits"][0]["_source"]["analysis"]["dotnetAnalysis"]) {
                    $has_deserialization = $results["hits"]["hits"][0]["_source"]["analysis"]["dotnetAnalysis"]["hasDeserialization"];
                }
            }
        }
    }
    catch $message {}

    try {
        if("parsedData" in $results["hits"]["hits"][0]["_source"]) {
            if("officeDocOle" in $results["hits"]["hits"][0]["_source"]["parsedData"]) {
                if("encrypted" in $results["hits"]["hits"][0]["_source"]["parsedData"]["officeDocOle"]) {
                    $encrypted = $results["hits"]["hits"][0]["_source"]["parsedData"]["officeDocOle"]["encrypted"];
                }
            }
            else if("officeDocNew" in $results["hits"]["hits"][0]["_source"]["parsedData"]) {
                if("encrypted" in $results["hits"]["hits"][0]["_source"]["parsedData"]["officeDocNew"]) {
                    $encrypted = $results["hits"]["hits"][0]["_source"]["parsedData"]["officeDocNew"]["encrypted"];
                }
            }
        }
    }
    catch $message {}

    # blog($BID, "File '" . $TargetFileName . "' analyzed by Nemesis (object_id: " . $objectId .")");

    $file_message  = "Nemesis file analyzed : " . $path . "\n";
    $file_message .= "    object_id             : " . $objectId ."\n";
    # $file_message .= "      submission_id         : " . $messageId ."\n";
    $file_message .= "    sha1                  : " . $sha1 . "\n";
    $file_message .= "    magic                 : " . $magicType . "\n";

    $dashboard_link = %nemesis::Settings['NemesisDashboardUrl'] . "?object_id=". $objectId;
    $file_message .= "    file in dashboard     : " . $dashboard_link . "\n";

    if ($contains_dpapi) {
        $file_message .= "    contains_dpapi        : True\n";
    }
    if ($has_parsed_credentials) {
        $file_message .= "    has_parsed_creds      : True\n";
    }
    if ($has_deserialization) {
        $file_message .= "    has_deserialization   : True\n";
    }
    if ($encrypted) {
        $file_message .= "    encrypted             : True\n";
    }
    if ($has_noseyparker_results) {
        $file_message .= "    NoseyParker results   : True\n";
    }

    # $file_message .= "      " . $kibana_link . "\n";

    blog($BID, $file_message);
}


sub nemesis::ReprocessDownloads {
    local('$download $BID $TimeStamp $TargetFileFolder $TargetFileName $TargetFileName $TargetFileSize $TeamServerPath $LastIndex $Filename $LocalFilePath');

    logger::WriteVerbose("[Nemesis] Reprocessing Nemesis downloads!");

    # @(%(date => '1659127565809', fid => '9', path => 'C:\Temp\', size => '8', lpath => '/home/user/cobaltstrike/downloads/f11a87fd6', host => '192.168.50.86', name => 'out.txt', rcvd => '8', id => '4bac4c1d-3986-446f-93e2-d3090581d589', bid => '339429212'))
    foreach $download (downloads())
    {
        $BID = $download['bid'];
        $TargetFileFolder = $download['path'];
        $TargetFileName = $download['name'];
        $TargetFileSize = $download['size'];
        $TeamServerPath = $download['lpath'];
        $TimeStamp = $download['date'];

        $LastIndex = [$TeamServerPath lastIndexOf: "/"];
        $Filename = substr($TeamServerPath, ($LastIndex + 1));

        # sync the download locally in case we're running this script on a remote system
        $LocalFilePath = %nemesis::Settings['DownloadsDir'] . $Filename;

        sync_download($TeamServerPath, $LocalFilePath, lambda({
            logger::WriteVerbose("[nemesis::ReprocessDownloads] Synced the file ". $LocalFilePath);
            nemesis::ProcessFile($BID, $LocalFilePath, $TargetFileFolder, $TargetFileName, $TargetFileSize, $TimeStamp, true);
        }, \$LocalFilePath, \$BID, \$TargetFileFolder, \$TargetFileName, \$TargetFileSize, \$TimeStamp));

        # TODO: delete download after sync?
    }
}


#################################################################
#
#   Custom Event Handlers
#
#################################################################

sub Handle_beacon_output_ls {
    # Note: not currently used
    # [+] Unhandled event beacon_output_ls:
    # 0: 14148
    # 1: C:\users\*
    #    D       0       05/22/2019 01:18:42     .
    #    D       0       05/22/2019 01:18:42     ..
    #    D       0       09/15/2018 00:42:33     All Users
    #    D       0       05/22/2019 02:42:37     Default
    # 2: 1560844546441
    local('$1 @Args $BID @Lines $Line @Parts $PathBase $Size $Type $ObjectType $Modified $Name @Files %File $MessageID $Date');

    @Args = $1;
    $BID = @Args[0];

    # don't process if things aren't initialized correctly yet
    if(!$NemesisReady) {return $null;}

    # if the GUI synced settings from a server, the main Nemesis code is also running on the teamserver,
    #   so don't handle downloads in the GUI so things aren't double-processed
    if(!$IsHeadlessClient && $ClientSyncedFromServer) {return $null;}

    @Lines = split('\n', @Args[1]);
    $PathBase = replace(left(@Lines[0], strlen(@Lines[0]) - 1), "\\\\", "/");

    @Files = @();

    foreach $Line (sublist(@Lines, 1)) {
        @Parts = split('\t', $Line);

        $Type = @Parts[0];
        $Size = @Parts[1];

        # date format: 02/01/2023 10:19:40
        $Date = parseDate('MM/dd/yyyy kk:mm:ss', @Parts[2]);
        $Modified = formatDate($Date, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");

        $Name = @Parts[3];
        $ObjectType = "other";

        if($Type eq 'F') {
            $ObjectType = "file";
        }
        else if($Type eq 'D') {
            $ObjectType = "folder";
        }

        if (($Name ne ".") && ($Name ne "..")) {
            %File = %(
                path => $PathBase . $Name;
                type => $ObjectType;
                size => $Size;
                modification_time => $Modified;
            );

            add(@Files, %File);
        }
    }

    $MessageID = http::PostData($BID, "file_information", @Files);
    logger::WriteVerbose("[Handle_beacon_output_ls] MessageID: ". $MessageID);
}


sub Handle_beacon_output_ps {
    # when used through agscript, syncs process data to Nemesis

    # [+] Unhandled event beacon_output_ps:
    # 0: 14148
    # 1: [System Process]     0       0
    #    System  0       4
    #    Secure System   4       88
    #    Registry        4       152
    #    <snip>
    # 2: 1560844380002
    local('$1 @Args $BID @Processes @Lines $Line @Parts %Process $MessageID');

    @Args = $1;
    $BID = @Args[0];

    # don't process if things aren't initialized correctly yet
    if(!$NemesisReady) {return $null;}

    # if the GUI synced settings from a server, the main Nemesis code is also running on the teamserver,
    #   so don't handle downloads in the GUI so things aren't double-processed
    if(!$IsHeadlessClient && $ClientSyncedFromServer) {return $null;}

    @Processes = @();

    @Lines = split('\n', @Args[1]);
    foreach $Line (@Lines) {
        @Parts = split('\t', $Line);

        # See the `ProcessIngestion` message definition in nemesis.proto
        %Process = %(
            name => @Parts[0];
            command_line => $null;
            file_name => $null;
            memory => $null;
            process_id => @Parts[2];
            parent_process_id => @Parts[1];
            start_time => $null;
            arch => @Parts[3];
            token => %(
                user => %(
                    name => @Parts[4];
                );
                session => @Parts[5];
            );
        );

        add(@Processes, %Process);
    }

    $MessageID = http::PostData($BID, "process", @Processes);
    logger::WriteVerbose("[Handle_beacon_output_ps] MessageID: ". $MessageID);
}


sub Handle_downloads {
    # [+] event: downloads
    # @(%(date => '1659127565809', fid => '9', path => 'C:\Temp\', size => '8', lpath => '/home/user/cobaltstrike/downloads/f11a87fd6', host => '192.168.50.86', name => 'out.txt', rcvd => '8', id => '4bac4c1d-3986-446f-93e2-d3090581d589', bid => '339429212'))
    local('$1 %Args $BID $TimeStamp $TargetFileFolder $TargetFileName $TargetFileSize $LastIndex $LocalFilePath $Filename $TeamServerPath $response $Filename');

    # don't process if things aren't initialized correctly yet
    if(!$NemesisReady) {return $null;}

    # if the GUI synced settings from a server, the main Nemesis code is also running on the teamserver,
    #   so don't handle downloads in the GUI so things aren't double-processed
    if(!$IsHeadlessClient && $ClientSyncedFromServer) {return $null;}

    %Args = $1;
    $BID = %Args[0]['bid'];
    $TimeStamp = %Args[0]['date'];
    $TargetFileFolder = %Args[0]['path'];
    $TargetFileName = %Args[0]['name'];
    $TargetFileSize = %Args[0]['size'];
    $TeamServerPath = %Args[0]['lpath'];

    $LastIndex = [$TeamServerPath lastIndexOf: "/"];
    $Filename = substr($TeamServerPath, ($LastIndex + 1));

    # sync the download locally in case we're running this script on a remote system
    $LocalFilePath = %nemesis::Settings['DownloadsDir'] . $Filename;

    sync_download($TeamServerPath, $LocalFilePath, lambda({
        logger::WriteVerbose("[Handle_downloads] Synced the file ". $LocalFilePath);
        nemesis::ProcessFile($BID, $LocalFilePath, $TargetFileFolder, $TargetFileName, $TargetFileSize, $TimeStamp, false);
    }, \$LocalFilePath, \$BID, \$TargetFileFolder, \$TargetFileName, \$TargetFileSize, \$TimeStamp));
}


sub Handle_beacon_output {
    local('$IsHeadlessClient $ClientSyncedFromServer $1 %Args $BID $Output $FileID $DomainController $BackupkeyGuid $RandomName $BackupkeyB64 %JsonData $JsonString %RawData $MessageID');

    # don't process if things aren't initialized correctly yet
    if(!$NemesisReady) {return $null;}

    # if the GUI synced settings from a server, the main Nemesis code is also running on the teamserver,
    #   so don't handle downloads in the GUI so things aren't double-processed
    if(!$IsHeadlessClient && $ClientSyncedFromServer) {return $null;}

    %Args = $1;
    $BID = %Args[0];
    $Output = %Args[1];

    # Handle domain backupkey output from SharpDPAPI
    if ($Output hasmatch '\[\*\] Using current domain controller  : ([a-zA-Z0-9\.-]+)\s*\[\*\] Preferred backupkey Guid         : ([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})\s*\[\*\]') {

        $DomainController = matched()[0];
        $BackupkeyGuid = matched()[1];

        # regex being weird, gotta nest this here for some reason
        if($Output hasmatch '\[\*\] Key                              : ([a-zA-Z0-9/+=]+)') {
            $BackupkeyB64 = matched()[0];

            %JsonData = %(
                domain_controller => $DomainController,
                domain_backupkey_guid => $BackupkeyGuid,
                domain_backupkey_b64 => $BackupkeyB64
            );
            $JsonString = json_dumps(%JsonData);

            # write up the JSON string to a random file name and upload it to Nemesis
            $RandomName = %nemesis::Settings['DownloadsDir'] . helpers::GetRandomFileName();
            $OutFile = openf(">" . $RandomName);
            writeb($OutFile, $JsonString);
            closef($OutFile);

            # upload the file to Nemesis and get a Nemesis UUID back
            $FileID = http::UploadFile($RandomName);
            if(%nemesis::Settings['DebugJson']) {
                logger::WriteVerbose("Domain BackupKey RandomName: " . $RandomName . ", Nemesis UUID: " . $FileID);
            }

            deleteFile($OutFile);

            %RawData = %(
                tags => @("dpapi_domain_backupkey");
                is_file => "true";
                data => $FileID;
            );

            $MessageID = http::PostData($BID, "raw_data", @(%RawData));
            blog($BID, "Nemesis: registered DPAPI domain backupkey (GUID: " . $BackupkeyGuid . ")\n             decrypting any existing linked DPAPI masterkeys/blobs");
            logger::WriteVerbose("DPAPI domain backupkey MessageID: ". $MessageID);
        }
    }
}


sub Handle_beacon_initial {
    local('$1 %Args $BID $Hostname $OS $Arch $ProcessName $ProcessId $ProcessUsername @AgentIds $Ver $Build $Description %HostJsonData $HostJsonString %HostRawData $HostMessageID %AgentJsonData $AgentJsonString %AgentRawData $AgentMessageID');

    # don't process if things aren't initialized correctly yet
    if(!$NemesisReady) {return $null;}

    # if the GUI synced settings from a server, the main Nemesis code is also running on the teamserver,
    #   so don't handle output in the GUI so things aren't double-processed
    if(!$IsHeadlessClient && $ClientSyncedFromServer) {return $null;}

    %Args = $1;
    $BID = %Args[0];

    $Hostname = beacon_info($BID, "computer");
    $OS = lc(beacon_info($BID, "os"));
    @AgentIds = @($BID, "testing");

    if(lc($OS) eq "windows") {
        $Ver = beacon_info($BID, "ver");
        $Build = beacon_info($BID, "build");
        $Description = "$Ver - $Build";
    }
    else {
        # TODO - basic linux ssh info?
    }

    %HostJsonData = %(
        hostname => $Hostname,
        description => $Description,
        os_type => "windows",
        agent_ids => @AgentIds
    );

    $HostJsonString = json_dumps(%HostJsonData);

    %HostRawData = %(
        tags => @("host_data_json");
        data => $HostJsonString
    );

    $HostMessageID = http::PostData($BID, "raw_data", @(%HostRawData));
    logger::WriteVerbose("[Handle_beacon_initial] Host MessageID: ". $HostMessageID);

    $Arch = lc(beacon_info($BID, "arch"));
    $ProcessName = beacon_info($BID, "process");
    $ProcessId = beacon_info($BID, "pid");
    $ProcessUsername = beacon_info($BID, "user");

    %AgentJsonData = %(
        agent_id => $BID,
        agent_type => "beacon",
        arch => $Arch,
        is_alive => true,
        process_name => $ProcessName,
        process_id => $ProcessId,
        process_username => $ProcessUsername
    );

    $AgentJsonString = json_dumps(%AgentJsonData);

    %AgentRawData = %(
        tags => @("agent_data_json");
        data => $AgentJsonString
    );

    $AgentMessageID = http::PostData($BID, "raw_data", @(%AgentRawData));
    logger::WriteVerbose("[Handle_beacon_initial] Agent MessageID: ". $HostMessageID);
}

#################################################################
#
#   Initialization Code
#
#################################################################

sub nemesis::Initialize {
    # let the ENV variables take precedence over settings synced from the server
    if([System getenv: "NEMESIS_COBALTSTRIKE_DOWNLOADS_DIR"]) {
        %nemesis::Settings['DownloadsDir'] = [System getenv: "NEMESIS_COBALTSTRIKE_DOWNLOADS_DIR"];
    }
    if([System getenv: "NEMESIS_BASE_URL"]) {
        %nemesis::Settings['NemesisBaseUrl'] = [System getenv: "NEMESIS_BASE_URL"];
    }
    if([System getenv: "NEMESIS_CREDS"]) {
        %nemesis::Settings['NemesisCreds'] = [System getenv: "NEMESIS_CREDS"];
    }
    if([System getenv: "NEMESIS_DEBUG_JSON"]) {
        %nemesis::Settings['DebugJson'] = iff([System getenv: "NEMESIS_DEBUG_JSON"] eq "1", 1, 0);
    }
    if([System getenv: "NEMESIS_PROJECT"]) {
        %nemesis::Settings['NemesisProject'] = [System getenv: "NEMESIS_PROJECT"];
    }
    if([System getenv: "NEMESIS_DATA_EXPIRATION_DAYS"]) {
        %nemesis::Settings['DataExpirationDays'] = [System getenv: "NEMESIS_DATA_EXPIRATION_DAYS"];
    }

    if(!$ClientSyncedFromServer) {
        # only check these settings if we're NOT a GUI client that synced from the server
        if(!%nemesis::Settings['DownloadsDir']) {
            logger::WriteError("The environment variable NEMESIS_COBALTSTRIKE_DOWNLOADS_DIR is not set. Quiting...");
            if (!$IsHeadlessClient) {
                show_error("The environment variable NEMESIS_COBALTSTRIKE_DOWNLOADS_DIR is not set. Nemesis will not work.");
            }
            return false;
        }

        if(-exists %nemesis::Settings['DownloadsDir']) {
        } else {
            logger::WriteError("The downloads directory " . %nemesis::Settings['DownloadsDir'] . " does not exist. Quiting...");
            if (!$IsHeadlessClient) {
                show_error("The downloads directory " . %nemesis::Settings['DownloadsDir'] . " does not exist. Nemesis will not work.");
            }
            return false;
        }

        if(-isDir %nemesis::Settings['DownloadsDir']) {
        } else {
            logger::WriteError("The downloads directory " . %nemesis::Settings['DownloadsDir'] . " is not a directory. Quiting...");
            if (!$IsHeadlessClient) {
                show_error("The downloads directory " . %nemesis::Settings['DownloadsDir'] . " is not a directory. Nemesis will not work.");
            }
            return false;
        }
    }

    if(!%nemesis::Settings['NemesisBaseUrl']) {
        logger::WriteError("The environment variable NEMESIS_BASE_URL is not set. Quiting...");
        if (!$IsHeadlessClient) {
            show_error("The environment variable NEMESIS_BASE_URL is not set or wasn't synced from a server. Nemesis will not work.");
        }
        return false;
    }

    if(!([(%nemesis::Settings['NemesisBaseUrl']) endsWith: "/"])) {
        %nemesis::Settings['NemesisBaseUrl'] .= "/"
    }

    %nemesis::Settings['NemesisApiUrl'] = %nemesis::Settings['NemesisBaseUrl'] . "api/";
    %nemesis::Settings['NemesisYaraUrl'] = %nemesis::Settings['NemesisBaseUrl'] . "yara/";
    %nemesis::Settings['NemesisDashboardUrl'] = %nemesis::Settings['NemesisBaseUrl'] . "dashboard/File_Viewer";
    %nemesis::Settings['ElasticsearchUrl'] = %nemesis::Settings['NemesisBaseUrl'] . "elastic/";

    if(!%nemesis::Settings['NemesisCreds']) {
        logger::WriteError("The environment variables NEMESIS_CREDS is not set. Quiting...");
        if (!$IsHeadlessClient) {
            show_error("The environment variable NEMESIS_CREDS is not set or wasn't synced from a server. Nemesis will not work.");
        }
        return false;
    }

    return true;
}

%EventHandlerMap = %(
    beacon_output_ls => &Handle_beacon_output_ls,
    beacon_output_ps => &Handle_beacon_output_ps,
    downloads => &Handle_downloads,
    beacon_output => &Handle_beacon_output,
    beacon_initial => &Handle_beacon_initial
);

sub nemesis::StartLogging {
    on * {
        local('$Event $func %Object');
        $Event = $1;

        $func = %EventHandlerMap[$Event];
        if($func) {
            [$func: subarray(@_, 1)];
        }
    }
}


#################################################################
#
#   Entrypoint
#
#################################################################

global('$IsHeadlessClient $ClientSyncedFromServer $NemesisReady');
$NemesisReady = false; # true once things are all initialized
$IsHeadlessClient = helpers::IsHeadlessClient();
$ClientSyncedFromServer = false; # set to true if the GUI client synced from a headless server

logger::Initialize($IsHeadlessClient);

sub nemesis::SyncFromServer {
    # if we're in the GUI, try to sync settings from the server
    privmsg("nemesis-bot", "GET NemesisBaseUrl");
    privmsg("nemesis-bot", "GET NemesisCreds");
    privmsg("nemesis-bot", "GET NemesisProject");
    sleep(2000);
    privmsg(mynick(), "Nemesis ready");
}

on ready {
    logger::WriteVerbose("IsHeadlessClient: $IsHeadlessClient");
    if(!$IsHeadlessClient) {
        fork(&nemesis::SyncFromServer);
    }
    else {
        privmsg(mynick(), "Nemesis ready");
    }
}

on event_private {
    # Used for syncing configuration from the headless server to the client
    local('$from $to $message $1 $2 $3');

    $from = $1;
    $to = $2;
    $message = $3;

    if($message ismatch "Nemesis ready") {
        # we got a signal that config syncing is completed
        if(nemesis::Initialize()) {
            if($IsHeadlessClient) {
                logger::WriteVerbose("Starting logging via agscript");
            }
            else {
                logger::WriteVerbose("Starting logging in the CS Client GUI");
            }
            nemesis::StartLogging();

            logger::WriteVerbose("Nemesis config settings:");
            logger::WriteVerbose("  ClientSyncedFromServer : " . $ClientSyncedFromServer);
            local('$key')
            foreach $key (keys(%nemesis::Settings))
            {
                logger::WriteVerbose("  " . $key . " : " . %nemesis::Settings[$key]);
            }

            $NemesisReady = true;
        }
        else {
            logger::WriteError("Failed to initialize. Aborting startup.");

            if($IsHeadlessClient) {
                [System exit: 1];
            }
        }
    }

    if($IsHeadlessClient) {
        if($to ismatch "nemesis-bot") {
            if ($message ismatch "GET NemesisBaseUrl") {
                privmsg($from, "SET NemesisBaseUrl " . %nemesis::Settings['NemesisBaseUrl']);
            }
            if ($message ismatch "GET NemesisCreds") {
                privmsg($from, "SET NemesisCreds " . %nemesis::Settings['NemesisCreds']);
            }
            if ($message ismatch "GET NemesisProject") {
                privmsg($from, "SET NemesisProject " . %nemesis::Settings['NemesisProject']);
            }
            if ($message ismatch "ReprocessDownloads") {
                nemesis::ReprocessDownloads();
                elog($from . " triggered reprocessing of existing Nemesis downloads");
            }
        }
    }
    else {
        if(($from ismatch "nemesis-bot") && ($to ismatch mynick())) {
            $ClientSyncedFromServer = true;
            if($message ismatch "SET NemesisBaseUrl .*") {
                %nemesis::Settings['NemesisBaseUrl'] = substr($message, 19);
                %nemesis::Settings['NemesisApiUrl'] = %nemesis::Settings['NemesisBaseUrl'] . "api/";
                %nemesis::Settings['NemesisYaraUrl'] = %nemesis::Settings['NemesisBaseUrl'] . "yara/";
                %nemesis::Settings['NemesisDashboardUrl'] = %nemesis::Settings['NemesisBaseUrl'] . "dashboard/File_Viewer";
                %nemesis::Settings['ElasticsearchUrl'] = %nemesis::Settings['NemesisBaseUrl'] . "elastic/";
            }
            if($message ismatch "SET NemesisCreds .*") {
                %nemesis::Settings['NemesisCreds'] = substr($message, 17);
            }
            if($message ismatch "SET NemesisProject .*") {
                %nemesis::Settings['NemesisProject'] = substr($message, 19);
            }
        }
    }
}
