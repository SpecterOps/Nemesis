# Always keep 4 and 34 enabled - they'll help catch common developer mistakes
debug(debug() | 4);     # 4  =	display a runtime warning for the first time use of non-declared variables.
#debug(debug() | 8);    # 8  =  DEBUGGING: trace all function calls
debug(debug() | 34);    # 34 = "throw" all errors flagged for use with &checkError
#debug(debug() | 64);   # 64 =	DEBUGGING: trace all predicate decisions (follow program logic)


sub file::ReadAllBytes {
	# helper to read file bytes
	local('$1 $path $handle $bytes $error');

	$path = $1;

	$handle = openf($path);
	throw checkError($error);

    try {
	    $bytes = readb($handle, -1);
    } catch $message {
        println("ERROR! " . $message);
    }

	closef($handle);

	return $bytes;
}


sub file::ReadBOF {
    local('$1 $2 $3 $barch $handle $data $msg');
    $barch  = barch($1);

    # read in the right BOF file
    $handle = openf(script_resource("./bof_reg_collect/build/ $+ $2 $+ . $+ $barch $+ .o"));
    $data   = readb($handle, -1);
    closef($handle);
    if(strlen($data) == 0)
    {
        berror($1, "Could not read BOF file");
    }

    $msg = iff( ($3 eq $null || $3 eq ""), "Running $2", $3);
    btask($1, $msg);
    return $data;
}
