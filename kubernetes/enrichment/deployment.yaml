apiVersion: apps/v1
kind: Deployment
metadata:
  name: enrichment
  labels:
    app: enrichment
    component: enrichment-pipeline
spec:
  replicas: 1
  selector:
    matchLabels:
      app: enrichment
  strategy: {}
  template:
    metadata:
      labels:
        app: enrichment
        component: enrichment-pipeline
    spec:
      volumes:
        - name: noseyparker
          emptyDir: {}
        - name: noseyparker-rules
          configMap:
            name: noseyparker-rules
      initContainers:
        - name: noseyparker
          image: ghcr.io/praetorian-inc/noseyparker:v0.13.0
          imagePullPolicy: IfNotPresent
          command: ["sh", "-c", "cp /usr/local/bin/noseyparker /opt/noseyparker/"]
          volumeMounts:
            - name: noseyparker
              mountPath: /opt/noseyparker/
      containers:
        - env:
            - name: LOG_LEVEL
              valueFrom:
                configMapKeyRef:
                  name: operation-config
                  key: log-level
            - name: DATA_DOWNLOAD_DIR
              value: "/tmp"
            - name: ENVIRONMENT
              valueFrom:
                configMapKeyRef:
                  name: operation-config
                  key: environment

            - name: CRACK_WORDLIST_TOP_WORDS
              value: "10000" # either 10,000 or 100,000
            - name: JTR_INSTANCES
              value: "1"

            - name: EXTRACTED_ARCHIVE_SIZE_LIMIT # limit of extracted archives to process, 500 MB
              value: "500000000"
            - name: CHUNK_SIZE # number of bytes to read at a time per file
              value: "128000"
            - name: MODEL_WORD_LIMIT # only extract passwords for documents below this word limit
              value: "100000"
            - name: YARA_API_PORT
              value: "9700"

            - name: CONTEXT_WORDS
              value: "5"
            - name: ML_CHUNK_SIZE
              value: "5000"
            - name: PROB_THRESHOLD
              value: ".95"

            - name: TENSORFLOW_URI
              value: "http://tensorflow-serving:8501/"
            - name: TIKA_URI
              value: http://tika:9998/
            - name: DOTNET_URI
              value: http://dotnet:9800/
            - name: GOTENBERG_URI
              value: http://gotenberg:3000/
            - name: ML_MODELS_URI
              value: http://127.0.0.1:5000/
            - name: CRACK_LIST_URI
              value: http://127.0.0.1:9900/
            - name: NEMESIS_HTTP_SERVER
              valueFrom:
                configMapKeyRef:
                  name: operation-config
                  key: nemesis-http-server
            - name: PUBLIC_NEMESIS_URL
              value: "$(NEMESIS_HTTP_SERVER)dashboard/"
            - name: PUBLIC_KIBANA_URL
              value: "$(NEMESIS_HTTP_SERVER)kibana/"
            - name: WEB_API_URL
              value: "$(NEMESIS_HTTP_SERVER)api/"

            - name: POSTGRES_SERVER
              value: postgres
            - name: POSTGRES_PORT
              value: "5432"
            - name: POSTGRES_DATABASE
              value: nemesis
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: postgres-creds
                  key: postgres-user
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-creds
                  key: postgres-password
            - name: POSTGRES_CONNECTION_URI
              value: "postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@$(POSTGRES_SERVER):$(POSTGRES_PORT)/$(POSTGRES_DATABASE)"
            - name: DB_ITERATION_SIZE
              value: "1000"

            - name: PROMETHEUS_DISABLE_CREATED_SERIES
              value: "True"
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: aws-creds
                  key: aws_access_key_id
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: aws-creds
                  key: aws_secret_key
            - name: AWS_BUCKET
              valueFrom:
                configMapKeyRef:
                  name: aws-config
                  key: aws-bucket
            - name: AWS_DEFAULT_REGION
              valueFrom:
                configMapKeyRef:
                  name: aws-config
                  key: aws-default-region
            - name: AWS_KMS_KEY_ALIAS
              valueFrom:
                configMapKeyRef:
                  name: aws-config
                  key: aws-kms-key-alias

            - name: STORAGE_PROVIDER
              valueFrom:
                configMapKeyRef:
                  name: operation-config
                  key: storage_provider
            - name: MINIO_ROOT_USER
              valueFrom:
                secretKeyRef:
                  name: minio-creds
                  key: minio_root_user
            - name: MINIO_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: minio-creds
                  key: minio_root_password

            - name: ASSESSMENT_ID
              valueFrom:
                configMapKeyRef:
                  name: operation-config
                  key: assessment-id
            - name: RABBITMQ_CONNECTION_URI
              valueFrom:
                secretKeyRef:
                  name: rabbitmq-creds
                  key: rabbitmq-connectionuri
            - name: ELASTICSEARCH_URL
              value: http://nemesis-es-internal-http:9200/
            - name: KIBANA_URL
              value: http://nemesis-kb-http:5601/
            - name: ELASTICSEARCH_USER
              valueFrom:
                secretKeyRef:
                  name: elasticsearch-users
                  key: username
            - name: ELASTICSEARCH_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: elasticsearch-users
                  key: password
            - name: PROMETHEUS_PORT
              value: "8000"
            - name: SLACK_CHANNEL
              valueFrom:
                configMapKeyRef:
                  name: operation-config
                  key: slack-alert-channel
            - name: SLACK_WEBHOOK_URL
              valueFrom:
                secretKeyRef:
                  name: operation-creds
                  key: slack_web_hook
            - name: SLACK_USERNAME
              value: Nemesis
            - name: SLACK_EMOJI
              value: ":smiling_imp:"
            - name: DISABLE_ALERTING
              valueFrom:
                configMapKeyRef:
                  name: operation-config
                  key: disable-slack-alerting
            - name: REPROCESSING_WORKERS
              value: "5"

          image: enrichment
          imagePullPolicy: IfNotPresent
          name: enrichment
          ports:
            - containerPort: 9700
              name: yara-http
          resources: {}
          volumeMounts:
            - name: noseyparker
              mountPath: /opt/noseyparker/
            - name: noseyparker-rules
              mountPath: /opt/noseyparker/noseyparker.rules
              subPath: noseyparker.rules
              readOnly: true
          readinessProbe:
            httpGet:
              path: /ready
              port: yara-http
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 5
            failureThreshold: 10
      restartPolicy: Always
status: {}
