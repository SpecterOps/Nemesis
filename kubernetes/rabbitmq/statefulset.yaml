apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app.kubernetes.io/name: nemesis
    app.kubernetes.io/component: rabbitmq-server
  name: nemesis-rabbitmq
  namespace: default
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: nemesis
      app.kubernetes.io/component: rabbitmq-server
  serviceName: nemesis-rabbitmq-discovery
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: nemesis
        app.kubernetes.io/component: rabbitmq-server
    spec:
      containers:
      - env:
        - name: JAVA_OPTS
          value: -Dlog4j2.formatMsgNoLookups=true -Dlog4j2.disable.jmx=true
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: RABBITMQ_USE_LONGNAME
          value: "true"
        - name: RABBITMQ_NODENAME
          value: rabbit@$(MY_POD_NAME).nemesis-rabbitmq-discovery.default.svc.cluster.local
        - name: K8S_SERVICE_NAME
          value: nemesis-rabbitmq-discovery
        - name: K8S_HOSTNAME_SUFFIX
          value: .nemesis-rabbitmq-discovery.default.svc.cluster.local
        - name: RABBITMQ_DEFAULT_USER
          valueFrom:
            secretKeyRef:
              key: rabbitmq-admin-user
              name: rabbitmq-creds
        - name: RABBITMQ_DEFAULT_PASS
          valueFrom:
            secretKeyRef:
              key: rabbitmq-admin-password
              name: rabbitmq-creds
        image: rabbitmq:3.11.7
        imagePullPolicy: IfNotPresent
        lifecycle:
          postStart:
            exec:
              command:
              - /bin/bash
              - -c
              - |
                # Wait for the RabbitMQ to be ready.
                until rabbitmqctl node_health_check; do
                  sleep 5
                done

                # By default, RabbitMQ does not have Highly Available policies enabled,
                # using the following command to enable it.
                rabbitmqctl set_policy ha-all "." '{"ha-mode":"all", "ha-sync-mode":"automatic"}' --apply-to all --priority 0
        name: rabbitmq
        ports:
        - containerPort: 25672
          name: clustering
          protocol: TCP
        - containerPort: 5672
          name: amqp
          protocol: TCP
        - containerPort: 5671
          name: amqp-ssl
          protocol: TCP
        - containerPort: 15692
          name: prometheus
          protocol: TCP
        - containerPort: 15672
          name: http
          protocol: TCP
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        volumeMounts:
        - mountPath: /etc/rabbitmq
          name: config
        - mountPath: /var/lib/rabbitmq
          name: nemesis-rabbitmq-data
        livenessProbe:
          exec:
            command:
            - rabbitmqctl
            - status
          initialDelaySeconds: 60
          timeoutSeconds: 30
          periodSeconds: 60
        readinessProbe:
          exec:
            command:
            - rabbitmqctl
            - status
          initialDelaySeconds: 5
          timeoutSeconds: 10
          periodSeconds: 5
      initContainers:
      - command:
        - /bin/bash
        - -euc
        - |
          # Remove cached erlang cookie since we are always providing it,
          # that opens the way to recreate the application and access to existing data
          # as a new erlang will be regenerated again.
          echo ${RABBITMQ_ERLANG_COOKIE} > /var/lib/rabbitmq/.erlang.cookie
          chmod 600 /var/lib/rabbitmq/.erlang.cookie

          # Copy the mounted configuration to both places.
          cp /rabbitmqconfig/rabbitmq.conf /etc/rabbitmq/rabbitmq.conf
          # Change permission to allow to add more configurations via variables
          chown :999 /etc/rabbitmq/rabbitmq.conf
          chmod 660 /etc/rabbitmq/rabbitmq.conf
          cp /rabbitmqconfig/enabled_plugins /etc/rabbitmq/enabled_plugins
        env:
        - name: RABBITMQ_ERLANG_COOKIE
          valueFrom:
            secretKeyRef:
              key: rabbitmq-erlang-cookie
              name: rabbitmq-creds
        image: debian:11
        imagePullPolicy: IfNotPresent
        name: copy-rabbitmq-config
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /rabbitmqconfig
          name: configmap
        - mountPath: /etc/rabbitmq
          name: config
        - mountPath: /var/lib/rabbitmq
          name: nemesis-rabbitmq-data
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccountName: nemesis-rabbitmq-sa
      terminationGracePeriodSeconds: 180
      volumes:
      - configMap:
          defaultMode: 420
          items:
          - key: rabbitmq.conf
            path: rabbitmq.conf
          - key: enabled_plugins
            path: enabled_plugins
          name: nemesis-rabbitmq-config
        name: configmap
      - emptyDir: {}
        name: config

      # Data persistence option #1 - No persistence
      - name: nemesis-rabbitmq-data # to have the data wiped on each reboot (for dev)
        emptyDir: {}
      # Data persistence option #2 - Node volume. Remove the emptydir volume and uncomment everything below (including the PersistentVolume/PersistentVolumeClaim)
      # - name: nemesis-rabbitmq-data
      #   persistentVolumeClaim:
      #     claimName: nemesis-rabbitmq-pvc


# ---
# Uncomment if you want RabbitMQ persistence
# apiVersion: v1
# kind: PersistentVolume
# metadata:
#   name: rabbitmq-data-pv
#   labels:
#     type: local
#     app: rabbitmq
# spec:
#   storageClassName: manual
#   capacity:
#     storage: 20Gi
#   accessModes:
#     - ReadWriteOnce
#   persistentVolumeReclaimPolicy: Retain
#   hostPath:
#     path: "/mnt/data/rabbitmq/"
# ---
# kind: PersistentVolumeClaim
# apiVersion: v1
# metadata:
#   name: nemesis-rabbitmq-pvc
#   labels:
#     app: rabbitmq
# spec:
#   storageClassName: manual
#   accessModes:
#     - ReadWriteOnce
#   resources:
#     requests:
#       storage: 20Gi
#   volumeName: rabbitmq-data-pv